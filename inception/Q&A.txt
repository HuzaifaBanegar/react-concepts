1. What is Emmet?
Ans: Emmet, formerly known as Zen Coding, is a web development toolkit and abbreviation engine that helps streamline and accelerate HTML and CSS coding. It was created by Sergey Chikuyonok and released in 2008. Emmet is designed to enhance the efficiency of writing code, allowing developers to write HTML and CSS markup quickly and concisely.
Emmet uses a shorthand syntax to generate HTML and CSS code through simple and intuitive abbreviations. It allows you to write complex code structures with minimal keystrokes. Emmet understands these abbreviations and expands them into full HTML or CSS code, saving time and reducing repetitive typing.
For example, by typing ul>li*5>a, Emmet will expand it into:
<ul>
    <li><a href=""></a></li>
    <li><a href=""></a></li>
    <li><a href=""></a></li>
    <li><a href=""></a></li>
    <li><a href=""></a></li>
</ul> 
This greatly simplifies the process of creating repetitive elements, such as lists with links, and allows developers to focus more on the structure and content of their web pages rather than spending time on writing boilerplate code.
Emmet is widely used and supported by various code editors and IDEs, including Visual Studio Code, Sublime Text, Atom, and many others. It has become an essential tool for many web developers, helping them write code more efficiently and increase their productivity

2. Difference between Library and Framework
Ans: While both libraries and frameworks are reusable code components in software development, there are key differences between the two:
A) **Control Flow**: Frameworks typically provide a pre-defined structure and control flow for building applications. They dictate the overall architecture and flow of the application, often using inversion of control or the Hollywood principle ("Don't call us, we'll call you"). Libraries, on the other hand, are collections of pre-written functions and utilities that developers can call as needed. They do not impose a specific structure or flow on the application and allow developers more freedom in designing the architecture.
B) **Inversion of Control**: Frameworks often implement inversion of control, where the framework itself controls the flow of the application and manages the execution of the developer's code. In this case, the developer writes code that fits within the framework's structure and hooks into various pre-defined methods or events. Libraries, on the other hand, do not typically provide inversion of control. Developers have more control over the execution flow of their code and can choose to use the library's functions as needed.
C) **Extensibility**: Frameworks are usually more comprehensive and provide a broader set of features to build an entire application or system. They are designed to be extensible and allow developers to build upon and customize the framework's functionality. Libraries, on the other hand, are often focused on specific tasks or functionalities and may not provide a complete application framework. Developers can choose which libraries to include and integrate them into their application as per their specific needs.
D) **Flexibility vs. Opinionated**: Libraries tend to be more flexible and can be used in a variety of ways within an application. Developers have more control over how they use libraries and can integrate them into their codebase in a manner that suits their requirements. Frameworks, on the other hand, are often more opinionated and come with a specific set of conventions, guidelines, and best practices. They impose a certain way of doing things and provide a structured approach to application development.
E) **Learning Curve**: Frameworks usually have a steeper learning curve compared to libraries because they often require developers to understand and adapt to the framework's architecture, conventions, and workflows. Libraries, being more focused and specific, are generally easier to learn and integrate into an application.
In summary, frameworks provide a complete structure and flow for building applications, while libraries are collections of functions and utilities that can be used as needed. Frameworks often impose a specific architecture and control flow, while libraries provide more flexibility and choice.

3. What is CDN? Why Do we use it?
Ans: CDN stands for Content Delivery Network. It is a distributed network of servers located in various geographical locations that work together to deliver web content, such as images, CSS files, JavaScript files, and other static assets, to end users. The purpose of a CDN is to improve the performance, availability, and reliability of content delivery.
When a user requests content from a website, the request is typically routed to the nearest CDN server rather than the origin server where the website is hosted. This reduces the distance between the user and the server, resulting in faster content delivery and reduced latency. CDN servers are strategically placed around the world to ensure that content is delivered from a server that is physically close to the user, minimizing the time it takes to fetch the content.
There are several reasons why CDNs are used:
A) **Improved Performance**: By delivering content from servers closer to the user, CDNs reduce the round-trip time (RTT) and latency, resulting in faster loading times for web pages. This is particularly beneficial for large files, such as images or videos, which can take longer to load without a CDN.
B) **Scalability**: CDNs are designed to handle high traffic loads and distribute the load across multiple servers. This helps websites and applications handle sudden spikes in traffic without overloading the origin server, ensuring a smooth user experience even during peak usage periods.
C) **Global Reach**: CDNs have a distributed network of servers worldwide, allowing content to be delivered to users regardless of their geographical location. This enables websites to serve content to a global audience with minimal latency and ensures consistent performance across different regions.
D) **Reliability and Redundancy**: CDNs are built with redundancy and fault tolerance in mind. If one server in the CDN network becomes unavailable or experiences issues, other servers can step in and serve the content. This helps improve the overall availability and reliability of content delivery.
E) **Offloading Origin Servers**: CDNs can cache static content, such as images, CSS, and JavaScript files, on their servers. This reduces the load on the origin server by offloading the delivery of such content to the CDN. The origin server can then focus on processing dynamic requests, resulting in better overall server performance.
In summary, CDNs are used to deliver content quickly and efficiently to users by leveraging a distributed network of servers. They improve performance, scalability, reliability, and global reach while reducing the load on origin servers. CDNs are particularly beneficial for websites or applications with a large user base or those serving content that is geographically dispersed.

4. Why is React known as React?
Ans: React, a popular JavaScript library for building user interfaces, is known as "React" because of its core concept of reacting to changes in data and efficiently updating the user interface. The name "React" reflects the key idea behind the library's design philosophy.
React was developed by a software engineer at Facebook named Jordan Walke. It was initially deployed on Facebook's newsfeed in 2011 and later open-sourced in 2013. React was created to address the need for building fast, scalable, and responsive user interfaces, especially for complex web applications.
The core principle of React is the concept of a virtual DOM (Document Object Model), which is a lightweight representation of the actual DOM in memory. React uses a reconciliation algorithm to compare changes in data and efficiently update the virtual DOM, minimizing the actual updates to the real DOM. By updating only the necessary parts of the user interface, React achieves high performance and optimizes the rendering process.
The name "React" emphasizes the reactive nature of the library. React components are designed to react to changes in data and automatically update the user interface accordingly. When the underlying data changes, React efficiently re-renders only the affected components, resulting in a fast and responsive UI.
Furthermore, React promotes a declarative programming style, where developers describe how the UI should look based on the current state and let React handle the updates automatically. This declarative approach enables developers to build complex UIs by composing reusable components.
In summary, React is known as "React" because it revolves around the idea of reacting to changes in data and efficiently updating the user interface. The name reflects its core principles of reactivity, virtual DOM, and declarative programming.

5. What is crossorigin in script tag?
Ans: The `crossorigin` attribute in the `<script>` tag is used to control how the browser handles cross-origin requests when loading a JavaScript file from a different domain or origin. It is specifically used when the JavaScript file being loaded via the `<script>` tag has a different origin than the webpage itself.
When a script is loaded from a different origin, the browser enforces a security mechanism called the Same-Origin Policy. This policy restricts scripts from accessing resources or making requests to a different origin for security reasons.
The `crossorigin` attribute can take the following values:
A) `anonymous`: This is the default value if the `crossorigin` attribute is specified without a value. It indicates that the script is loaded from a different origin, and the script requests data from that origin, but it does not require any credentials (like cookies or HTTP authentication) to be sent along with the request.
B) `use-credentials`: This value indicates that the script is loaded from a different origin and requires credentials to be sent along with the request. This can include cookies, HTTP authentication, or client-side SSL certificates. The server hosting the script must be configured to allow such cross-origin requests with credentials.
The `crossorigin` attribute is used primarily for security purposes and is relevant when loading scripts from a different origin. It helps ensure that cross-origin requests follow the appropriate security protocols and prevents unauthorized access to sensitive resources.
Note that the `crossorigin` attribute is only applicable to external scripts loaded via the `<script>` tag. It does not apply to inline scripts or scripts loaded from the same origin as the webpage.

6. Difference between React and ReactDOM
Ans: React and ReactDOM are two separate packages in the React ecosystem, each serving a different purpose:
1. **React**: React is the core library of React that provides the foundation for building user interfaces. It is responsible for managing the component hierarchy, rendering components, handling component state and props, and providing the necessary tools for creating reusable UI components.
2. **ReactDOM**: ReactDOM is a package that serves as the glue between React and the actual Document Object Model (DOM) of the web page. It provides the rendering capabilities required to display React components in the browser.
ReactDOM contains methods for interacting with the DOM, such as rendering React components into the DOM, updating the DOM when component state or props change, and unmounting components from the DOM. It bridges the gap between React's virtual DOM representation and the real DOM, ensuring that the UI updates efficiently and accurately.
ReactDOM is specifically designed for rendering React components in web browsers. There are also separate packages available for rendering React components in other environments, such as React Native for building mobile applications or React VR for creating virtual reality experiences.
In summary, React is the core library responsible for managing component hierarchy and providing the tools for building user interfaces, while ReactDOM is a package that enables rendering and updating React components in the web browser's DOM. Both React and ReactDOM are crucial components of the React ecosystem, working together to create interactive and dynamic user interfaces.

7. What is difference between react.development.js and react.production.js files via CDN?
Ans: React provides two different versions of its JavaScript files, `react.development.js` and `react.production.js`, which are typically served via a Content Delivery Network (CDN). The main differences between these files are:
A) **Development vs. Production Environments**: The `react.development.js` file is intended for use in development environments, while the `react.production.js` file is optimized for production environments. The development version includes extra warnings, error messages, and debugging features, which can help developers during the development and debugging process. It is larger in size compared to the production version. The production version, on the other hand, is optimized for performance and has a smaller file size as it excludes the additional development-specific features.
B) **Error Messages and Warnings**: The development version (`react.development.js`) includes more detailed error messages and warnings, which can assist developers in identifying and fixing issues during development. These error messages and warnings help pinpoint potential problems, such as incorrect prop types, component rendering errors, or incorrect usage of React APIs. In contrast, the production version (`react.production.js`) includes more concise error messages, aimed at reducing file size and improving performance. These error messages are less verbose and do not provide as much detailed information as the development version.
C) **File Size and Performance**: The development version (`react.development.js`) is typically larger in file size compared to the production version (`react.production.js`). It contains additional code for error checking, debugging, and development-specific features. The production version, being optimized for performance, has a smaller file size. This smaller file size can lead to faster load times and improved performance in production environments.
When developing a React application, it is common to use the development version (`react.development.js`) to take advantage of the additional error messages and warnings for debugging purposes. However, it is important to switch to the production version (`react.production.js`) when deploying the application to a production environment to ensure optimal performance and reduce the file size.
Note that in addition to the development and production versions, React also provides a minified version (`react.min.js`), which is further optimized for size by removing unnecessary white spaces and comments. This minified version is commonly used in production environments to further reduce the file size and improve loading performance.

8. What is async and defer?
Ans: The `async` and `defer` attributes are used in the HTML `<script>` tag to control the loading and execution behavior of external JavaScript files. Both attributes affect how the browser handles the downloading and execution of scripts, but there are differences in their behavior:
1. **Async (`async` attribute)**: When the `async` attribute is included in the `<script>` tag, it indicates that the script should be loaded asynchronously. This means that the script will be downloaded and executed asynchronously while the HTML parsing and rendering process continue. The script will not block the parsing of the HTML document.
The exact behavior of `async` depends on whether the script is external (loaded from a different source) or inline (defined within the HTML document):
- External Script: The browser will initiate the download of the external script without blocking the rendering of the page. Once the script is downloaded, it will be executed immediately, potentially interrupting the rendering process. The order of execution for multiple `async` scripts is not guaranteed and can vary depending on the network speed and other factors.
- Inline Script: Inline scripts with the `async` attribute are ignored. The `async` attribute has no effect on inline scripts.
2. **Defer (`defer` attribute)**: The `defer` attribute indicates that the script should be deferred. Deferred scripts are downloaded asynchronously, similar to scripts with the `async` attribute, but with a few key differences:
- External Script: The browser will start downloading the external script without blocking the rendering of the page. However, the execution of the script is deferred until the HTML document is fully parsed. This means that deferred scripts will be executed in the order they appear in the HTML document, after the parsing is complete.
- Inline Script: Inline scripts with the `defer` attribute are ignored. The `defer` attribute has no effect on inline scripts.
In summary, the main differences between `async` and `defer` are:
- `async` scripts are executed immediately after being downloaded, potentially interrupting the rendering process, and their execution order is not guaranteed.
- `defer` scripts are downloaded asynchronously but are executed after the HTML document is fully parsed, preserving the execution order.
Both `async` and `defer` can be useful in optimizing the loading and execution of external scripts, depending on the specific requirements of the script and the desired behavior during page rendering.
